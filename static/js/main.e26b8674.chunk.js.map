{"version":3,"sources":["components/Banner/index.tsx","components/Card/index.tsx","components/Separator/index.tsx","components/Footer/index.tsx","components/Gutter/index.tsx","components/Section/index.tsx","components/SectionHeader/index.tsx","components/ClientsList/index.tsx","components/ServicesList/index.tsx","containers/Home/index.tsx","routes.tsx","main.tsx","registerServiceWorker.tsx","store/home/actions.ts","store/home/reducer.ts","store/home/types.ts","store/home/api.ts","store/home/sagas.ts","store/index.ts","index.tsx","configureStore.ts"],"names":["Banner","props","react_default","a","createElement","className","highlighted_title","title","Separator_Separator","intro_title","intro_paragraph","Card","paragraph","Separator","Footer","Gutter_Gutter","href","Gutter","classes","center","children","Section","SectionHeader","ClientsList","items","map","i","key","ServiceList","Card_Card","Home","react","Section_Section","Banner_Banner","ServicesList_ServiceList","SectionHeader_SectionHeader","ClientsList_ClientsList","Footer_Footer","React","Routes","Switch","Route","path","component","Main","_this$props","this","store","history","es","lib","routes","Boolean","window","location","hostname","match","fetchListSuccess","data","action","HomeActionTypes","FETCH_LIST_SUCCESS","fetchListError","message","FETCH_LIST_ERROR","initialState","errors","undefined","loading","updating","FETCH_LIST_REQUEST","API_ROOT","getList","axios","get","concat","handleLeadGenFetchList","watchFetchListRequest","leadsSaga","res","payload","regenerator_default","wrap","_context","prev","next","call","sent","put","t0","Error","stack","stop","_marked","_context2","takeEvery","_marked2","_context3","all","fork","_marked3","rootSaga","rootReducer","combineReducers","home","state","arguments","length","type","Object","objectSpread","store_marked","createBrowserHistory","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","connectRouter","applyMiddleware","routerMiddleware","run","configureStore","initialReduxState","ReactDOM","main_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e26b8674.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./banner.css\";\nimport { Separator } from \"..\";\n\nexport type BannerProps = {\n  title: string;\n  highlighted_title?: string;\n  intro_title?: string;\n  intro_paragraph?: string;\n};\n\nexport const Banner = (props: BannerProps) => (\n  <div className=\"banner\">\n    <div className=\"banner__content\">\n      <h1 className=\"banner__header\">\n        <span className=\"banner__header--red\">{props.highlighted_title}</span>\n        {props.title}\n      </h1>\n      <Separator />\n      <article className=\"banner__intro\">\n        <h2 className=\"banner__intro_title f2-ns\">{props.intro_title}</h2>\n        <p className=\"banner_intro_paragraph\">{props.intro_paragraph}</p>\n      </article>\n    </div>\n  </div>\n);\n\nexport default Banner;\n","import React from \"react\";\nimport \"./card.css\";\n\nexport type CardProps = {\n  title: string;\n  paragraph?: string;\n};\n\nexport const Card = (props: CardProps) => (\n  <figure className=\"card\">\n    <figcaption className=\"card__content\">\n      <h3 className=\"card__title\">{props.title}</h3>\n      <div className=\"card__line\" />\n      <p className=\"card__paragraph\">{props.paragraph}</p>\n    </figcaption>\n  </figure>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./separator.css\";\n\nexport const Separator = () => <hr className=\"separator\" />;\n\nexport default Separator;\n","import React from \"react\";\nimport { Gutter } from \"..\";\n\nimport \"./footer.css\";\n\nexport const Footer = () => (\n  <footer className=\"footer\">\n    <Gutter>\n      <div className=\"cf footer__content\">\n        <div className=\"fl w-two-thirds-ns\">\n          <br />\n        </div>\n        <div className=\"fl w-third-ns\">\n          <span>Get in touch: </span>\n          <a className=\"footer__link\" href=\"mailto:hi@xibitdigital.com\">\n            hi@xibitdigital.com\n          </a>\n          <br />\n          <span>Â©2019 All rights reserved</span>\n        </div>\n      </div>\n    </Gutter>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./gutter.css\";\n\ntype ReactNode =\n  | React.ReactChild\n  | React.ReactChildren\n  | React.ReactFragment\n  | React.ReactPortal\n  | boolean\n  | null\n  | undefined;\n\ntype GutterProps = {\n  children: ReactNode;\n  center?: boolean;\n};\n\nexport const Gutter = (props: GutterProps) => {\n  const classes = props.center ? \" gutter gutter--center\" : \"gutter\";\n\n  return <div className={classes}>{props.children}</div>;\n};\n\nexport default Gutter;\n","import React from \"react\";\nimport \"./section.css\";\n\ntype ReactNode =\n  | React.ReactChild\n  | React.ReactChildren\n  | React.ReactFragment\n  | React.ReactPortal\n  | boolean\n  | null\n  | undefined;\n\ntype SectionProps = {\n  children: ReactNode;\n};\n\nexport const Section = (props: SectionProps) => {\n  return <div className=\"section\">{props.children}</div>;\n};\n\nexport default Section;\n","import React from \"react\";\nimport \"./sectionheader.css\";\n\ntype SectionHeaderProps = {\n  title: string;\n};\n\nexport const SectionHeader = (props: SectionHeaderProps) => {\n  return <div className=\"section__header f2-ns\">{props.title}</div>;\n};\n\nexport default SectionHeader;\n","import React from \"react\";\nimport \"./client-list.css\";\n\nexport type ClientsListProps = {\n  items: string[];\n};\n\nexport const ClientsList = (props: ClientsListProps) => (\n  <ul className=\"list pl0 mt2 cf client-list\">\n    {props.items.map((a, i) => (\n      <li key={i} className=\"fl w-third-ns client-list__item\">\n        {a}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default ClientsList;\n","import React from \"react\";\nimport \"./service-list.css\";\nimport { Card, CardProps } from \"../Card\";\n\nexport type ServicesListProps = {\n  items: CardProps[];\n};\n\nexport const ServiceList = (props: ServicesListProps) => (\n  <ul className=\"list pl0 mt2 cf service-list\">\n    {props.items.map((a, i) => (\n      <li key={i} className=\"service-list__item\">\n        <Card {...a} />\n      </li>\n    ))}\n  </ul>\n);\n\nexport default ServiceList;\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Banner, Footer, Gutter, Section, SectionHeader, ClientsList, ServiceList } from \"../../components\";\n\ninterface RouterProps {}\n\ninterface HomeProps extends RouteComponentProps<RouterProps> {}\n\ntype AllProps = RouteComponentProps & HomeProps;\n\nexport default class Home extends React.Component<AllProps> {\n  render() {\n    return (\n      <React.Fragment>\n        <Section>\n          <Gutter center={true}>\n            <Banner\n              highlighted_title=\"Xibit\"\n              title=\"Digital\"\n              intro_title=\"Who we are\"\n              intro_paragraph=\"Creative, results driven technology leader with years of proven R&D experience. Change agent and problem solving with a passion for technology; skilled in grasping the big picture new ideas and concepts, conceptualising, developing, and implementing solutions and partnering closely with business leaders.\"\n            />\n          </Gutter>\n        </Section>\n        <Section>\n          <Gutter>\n            <ServiceList items={[{ title: \"Consultancy\" }, { title: \"Development\" }, { title: \"DevOps\" }]} />\n          </Gutter>\n        </Section>\n        <Section>\n          <Gutter>\n            <SectionHeader title=\"Clients\" />\n            <ClientsList\n              items={[\n                \"Home Office\",\n                \"Dna-E\",\n                \"EY\",\n                \"Lloyds Bank\",\n                \"Trade Doubler\",\n                \"MTV\",\n                \"O2\",\n                \"Upcast\",\n                \"Da Travel\"\n              ]}\n            />\n          </Gutter>\n        </Section>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./containers/Home\";\n// import { NoMatch } from \"./components\";\n\nconst Routes: React.SFC = () => (\n  <Switch>\n    <Route path=\"/\" component={Home} />\n  </Switch>\n);\n\nexport default Routes;\n","import * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Store } from \"redux\";\nimport { History } from \"history\";\n\nimport Routes from \"./routes\";\nimport { ApplicationState } from \"./store\";\n\ninterface PropsFromDispatch {\n  [key: string]: any;\n}\n\n// Any additional component props go here.\ninterface OwnProps {\n  store: Store<ApplicationState>;\n  history: History;\n}\n\n// Create an intersection type of the component props and our Redux props.\ntype AllProps = PropsFromDispatch & OwnProps;\n\nexport default class Main extends React.Component<AllProps> {\n  public render() {\n    const { store, history } = this.props;\n\n    return (\n      <React.Fragment>\n        <Provider store={store}>\n          <ConnectedRouter history={history}>\n            <Routes />\n          </ConnectedRouter>\n        </Provider>\n      </React.Fragment>\n    );\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { action } from \"typesafe-actions\";\nimport { HomeActionTypes } from \".\";\n\nexport const fetchListRequest = (payload: any) => action(HomeActionTypes.FETCH_LIST_REQUEST, payload);\nexport const fetchListSuccess = (data: any[]) => action(HomeActionTypes.FETCH_LIST_SUCCESS, data);\nexport const fetchListError = (message: string) => action(HomeActionTypes.FETCH_LIST_ERROR, message);\n","import { Reducer } from \"redux\";\nimport { HomeState, HomeActionTypes } from \".\";\n\nconst initialState: HomeState = {\n  data: {},\n  errors: undefined,\n  loading: false,\n  updating: false\n};\n\nconst reducer: Reducer<HomeState> = (state = initialState, action) => {\n  switch (action.type) {\n    case HomeActionTypes.FETCH_LIST_REQUEST: {\n      return { ...state, loading: true };\n    }\n    case HomeActionTypes.FETCH_LIST_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        data: action.payload\n      };\n    }\n    case HomeActionTypes.FETCH_LIST_ERROR: {\n      return { ...state, loading: false, errors: action.payload };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport { reducer as homeReducer };\n","type ApiResponse = Record<string, any>;\n\ninterface ObjectIndexer<T> {\n  [id: string]: T;\n}\n\n// ACTIONS\nexport const HomeActionTypes = {\n  FETCH_LIST_REQUEST: \"@@home/FETCH_LIST_REQUEST\",\n  FETCH_LIST_SUCCESS: \"@@home/FETCH_LIST_SUCCESS\",\n  FETCH_LIST_ERROR: \"@@home/FETCH_LIST_ERROR\"\n};\n\n//STATE\nexport type HomeState = {\n  readonly data: any;\n  readonly loading: boolean;\n  readonly updating: boolean;\n  readonly errors?: string;\n};\n","import axios from \"axios\";\n\nconst API_ROOT = \"\";\n\nexport function getList(action: any) {\n  return axios.get(`${API_ROOT}`);\n}\n","import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { HomeActionTypes } from \"./types\";\nimport { fetchListError, fetchListSuccess } from \"./actions\";\nimport { getList } from \"./api\";\n\nfunction* handleLeadGenFetchList(action: any) {\n  try {\n    const res = yield call(getList, action);\n    const payload = res ? res.data : {};\n\n    yield put(fetchListSuccess(payload));\n  } catch (err) {\n    if (err instanceof Error) {\n      yield put(fetchListError(err.stack!));\n    } else {\n      yield put(fetchListError(\"An unknown error occurred.\"));\n    }\n  }\n}\n\nfunction* watchFetchListRequest() {\n  yield takeEvery(HomeActionTypes.FETCH_LIST_REQUEST, handleLeadGenFetchList);\n}\n\nfunction* leadsSaga() {\n  yield all([fork(watchFetchListRequest)]);\n}\n\nexport default leadsSaga;\n","import { combineReducers, Dispatch, Action, AnyAction } from \"redux\";\nimport { all, fork } from \"redux-saga/effects\";\n\nimport { HomeState, homeReducer } from \"./home\";\n\nimport leadsSaga from \"./home/sagas\";\n\nexport interface ApplicationState {\n  home: HomeState;\n}\n\nexport interface ConnectedReduxProps<A extends Action = AnyAction> {\n  dispatch: Dispatch<A>;\n}\n\nexport const rootReducer = combineReducers<ApplicationState>({\n  home: homeReducer\n});\n\nexport function* rootSaga() {\n  yield all([fork(leadsSaga)]);\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport Main from \"./main\";\nimport * as serviceWorker from \"./registerServiceWorker\";\nimport configureStore from \"./configureStore\";\n\n// We use hash history because this example is going to be hosted statically.\n// Normally you would use browser history.\nconst history = createBrowserHistory();\n\nconst initialState = window.initialReduxState;\nconst store = configureStore(history, initialState);\n\nReactDOM.render(<Main store={store} history={history} />, document.getElementById(\"root\"));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Store, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\n// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from \"history\";\n\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, rootReducer, rootSaga } from \"./store\";\n\nexport default function configureStore(\n  history: History,\n  initialState: ApplicationState\n): Store<ApplicationState> {\n  // create the composing function for our middlewares\n  const composeEnhancers = composeWithDevTools({});\n  // create the redux-saga middleware\n  const sagaMiddleware = createSagaMiddleware();\n\n  // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n  // we'll be passing from our entry point.\n\n  const store = createStore(\n    connectRouter(history)(rootReducer),\n    initialState,\n    composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n  );\n\n  // Don't forget to run the root saga, and return the store object.\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n"],"sourceRoot":""}